
import turtle as t
from random import randint


# Постройка здания 

# Для этого необходимо
# заказчик - который предоставляет менеджеру местоположение здания, высоту здания, площадь здания 
#   Менеджер - обращается к подгрупам
#       1) архитектору с высотой и плоадью здания, а получает стопку бумаг с точными данными будущего здания 
                # архитекор создает размеры и данные будущего здания и возвращает их менеджеру
#       2) Прорабу который будет строить дом дает финансы и размеры и данные будущего здания от архитектора. 
            # К работникам для созведения фундамента точное место и площадь здания, возвращают готовый фундамент 
            # к работникам для возведения стен, высоту здания и расположение всех деталей, возвращаеют готовые этажи
            # к работникам для возведения крыши детали крыши и её размеры, возвращают готовую крышу
#          
#       !В случае недочетов вновь обращаются к прорабу для исправления работы
#       3) Тестировщик здания 
            # к работникам для тестировки здания готовое здание для проверки, возвращают все недочеты
            # В случае недочетов вновь обращаются к тестировщику, и если все хорошо возвращают здание менеджеру
        
        # Менеджер возвращает готовое здание заказчику 


def manager_of_bilding(*,place:list,height:int, a:int, b:int)-> str:
    """Функция получает локацию, разрешенную высоту и максимальную площадь будущего здания,
    производит работу с этими данными и возвращает готовый и проверенное здание!

    Args:
        place (list): геолокация здания
        height (int): Максимальная высота будущего здания
        area (list): Максимальная площадь будущего здания

    Returns:
        str: Возвращает сообщение о том, что здание построено и готово!
    """
    maket = archetector_of_bilding(height=height,a=a,b=b)
    bilder_ground(x=maket[0],place=place)
    bilder_wall(x=maket[0], h=maket[1],place=place)
    bilder_roof(x=maket[0])
    
    
    
    print('Здание готово!')

def archetector_of_bilding(*, height:int,a:int,b:int) -> str:
    """Функция получает высоту и площадь здания и создает её макет 

    Args:
        height (int): Высота будущего здания
        a (int): Длина места будущего здания
        b (int): ширина места будущего здания

    Returns:
        list(x,h): длина и высота будущего здания
    """
    x = randint(10,a)
    y = randint(10,b)
    h = randint(10,height)
    print('Макет здания готов')
    return [x,h]


def bilder_ground(*, x:int,place:list) -> str:
    """Закладывет фундамент будущего здания и делает пол

    Args:
        x (int): длина будущего здания
        place (list): Координаты здания
    """
    t.penup()
    t.goto(place[0],place[1])
    t.pendown()
    t.forward(x)
    print('Фундамент готов!')

def bilder_wall(*, x:int, h:int, place: list):
    """Эта функция получает высоту и длину здания и строит стены

    Args:
        x (int): Длина здания от архитектора
        h (int): Высота здания от архитектора
        place (list): Координаты здания
    """
    
    t.left(90)
    t.forward(h)
    t.penup()
    t.goto(place[0],place[1])
    t.pendown()
    t.forward(h)
    print("Стены готовы!")
    
def bilder_roof(*,x:int):
    """Функция получает длину здания и строит крышу!

    Args:
        x (int): Длина здания и крыши

    """
    t.right(90)
    t.forward(x)
    
    print("Крыша построена!")
        
    
    
    
    

# x,h = archetector_of_bilding(height=100,a=70,b=70)

manager_of_bilding(place=[randint(-200,200),randint(-200,200)], height=100,a=100, b=50)
t.done()